package vamix;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.net.URL;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

/**
 * 
 * This worker class is called by AudioWorker and takes the temporary file generated by that class.
 * It then replaces the existing audio on the video with this new audio. If the process is succesful
 * it sets the new file to the currently playing video.
 *
 */

public class OverlayReplaceAudioWorker extends SwingWorker {

	private ProcessBuilder builder;
	private String currentVideoFilePath;
	private String currentAudioFilePath;
	private String outputNameText;
	private int mode;
	private Process process;
	private int exit;

	public OverlayReplaceAudioWorker(String currentVideoFilePath, String currentAudioFilePath, String outputNameText, int inputMode, 
			int startTimeVideo) {
		this.currentVideoFilePath = currentVideoFilePath;
		this.currentAudioFilePath = currentAudioFilePath;
		this.outputNameText = outputNameText;
		this.mode = inputMode;
	}

	@Override
	protected String doInBackground() throws Exception {
		builder = new ProcessBuilder();
		
		//Depending on which mode option is specified in AudioWorker either replace or overlay functionality
		//is carried out.
		//NOTE: Overlay does not work and cannot be activated by the user. It would have been time consuming to implement
		//      and I didn't have enough time. However I've left the code in place in case I do come back to it and decided
		//      to implement it.
		
		
		//Replace		
		if (mode==5){
						
			builder.command("avconv","-y", "-i", currentAudioFilePath, "-i", currentVideoFilePath, "-c", "copy", outputNameText);
			
		}
		//Overlay
		else if (mode==6){
			
			builder.command("avconv","-y", "-i", currentAudioFilePath, "-i", currentVideoFilePath, "-c", "copy", outputNameText);
		}
		
		builder.redirectErrorStream(true);
		process = builder.start();
		InputStream stdout = process.getInputStream();
		BufferedReader stdoutBuffered = new BufferedReader(new InputStreamReader(stdout));
		String line = null;
		// Read linux output from avconv command
		while ((line = stdoutBuffered.readLine()) != null ) {
			System.out.println(line);
		}
		return null;
	}
	

	protected void done(){
		
		   //Get the exit value 	   
		   exit=process.exitValue();		   
		   Audio.outputTEMPFile.delete();
		   AudioSliders.extractLengthAudio.setEnabled(true);
		   AudioSliders.extractStartSlider.setEnabled(true);
		   
		   //Check error values to see if the process completed successfully
		   if(exit==0){		
				JOptionPane.showMessageDialog(new JPanel(), "Audio Overlay complete!");
				//Auto set current video
				mainGUI.currentSelectedVideoFile=new File(outputNameText);
				VideoPlayback.currentVideoDisplay.setText(mainGUI.currentSelectedVideoFile.getName());
			   
			}		   
		   //Different outputs for different error values
			else {
			JOptionPane.showMessageDialog(new JPanel(), "Process Failed");
			}
			
		
	}
	
}
